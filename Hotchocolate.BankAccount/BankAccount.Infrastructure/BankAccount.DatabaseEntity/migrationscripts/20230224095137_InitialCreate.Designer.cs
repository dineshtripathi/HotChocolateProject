// <auto-generated />
using System;
using BankAccount.DatabaseEntity.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankAccount.DatabaseEntity.migrationscripts;

[DbContext(typeof(BankAccountDBContext))]
[Migration("20230224095137_InitialCreate")]
partial class InitialCreate
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "7.0.3")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("City")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("CustomerId")
                    .HasColumnType("int");

                b.Property<string>("State")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Street")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ZipCode")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.ToTable("Addresses");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Customer", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Customers");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.CustomerBankAccount", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("AccountNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("BankName")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("CustomerId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.ToTable("CustomerBankAccounts");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.LoanRelationship", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("Amount")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("CustomerId")
                    .HasColumnType("int");

                b.Property<decimal>("InterestRate")
                    .HasColumnType("decimal(18,2)");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.ToTable("LoanRelationships");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Mortgage", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<decimal>("Amount")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("CustomerId")
                    .HasColumnType("int");

                b.Property<decimal>("InterestRate")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("Term")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.ToTable("Mortgages");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Address", b =>
            {
                b.HasOne("BankAccount.Domain.Model.Entity.Customer", null)
                    .WithMany("Addresses")
                    .HasForeignKey("CustomerId");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.CustomerBankAccount", b =>
            {
                b.HasOne("BankAccount.Domain.Model.Entity.Customer", null)
                    .WithMany("BankAccounts")
                    .HasForeignKey("CustomerId");
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.LoanRelationship", b =>
            {
                b.HasOne("BankAccount.Domain.Model.Entity.Customer", null)
                    .WithMany("LoanRelationships")
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Mortgage", b =>
            {
                b.HasOne("BankAccount.Domain.Model.Entity.Customer", null)
                    .WithMany("Mortgages")
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("BankAccount.Domain.Model.Entity.Customer", b =>
            {
                b.Navigation("Addresses");

                b.Navigation("BankAccounts");

                b.Navigation("LoanRelationships");

                b.Navigation("Mortgages");
            });
#pragma warning restore 612, 618
    }
}
